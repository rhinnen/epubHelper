#!/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
#
# (That line is included so we don't have to launch the program
# as 'python <program>', we can just run it directly on the commandline.
# The path specified there is the path to your preferred version of
# python. How to make a python package executable on a windows machine
# is different.)
#
# merger
# 
#
import sys, os, getopt
from shutil import copytree, rmtree, copyfile
from datetime import datetime

# Variable declarations
title = ""
bookDir = ""
authorFirst = "" 
authorLast = ""
editorFirst = ""
editorLast = ""
coverFirst = ""
coverLast = ""
chapters = []
images = []
titleTag = "[TITLE]"
firstnameSearch = "Firstname"
lastnameSearch = "Lastname"
force = False
today = str(datetime.now().year) + "-" + str(datetime.now().month) + "-" + str(datetime.now().day)

def replace(search, result, line):
	# I do this several times in the code, so hey, mod it!
	newline = line
	found = line.find(search)
	if found > -1:
		newline = line[0:found] + result + line[found + len(search):]
	return newline
	
def extract(search, line):
	# returns the juicy data, without the cruft
	if search in line:
		endPoint = line.find(" -->") # these lines should always end " -->"
		return line[line.find(search) + len(search):endPoint]

def doBookInfo(filepath):
	# global bookInfo
	global title
	global bookDir
	global authorFirst
	global authorLast
	global editorFirst
	global editorLast
	global coverFirst
	global coverLast
	findTitle = "<!-- Title: "
	findBookDir = "<!-- BookDir: "
	findAuthorFirst = "<!-- AuthorFirst: "
	findAuthorLast = "<!-- AuthorLast: "
	findEditorFirst = "<!-- EditorFirst: "
	findEditorLast = "<!-- EditorLast: "
	findCoverFirst = "<!-- CoverFirst: "
	findCoverLast =  "<!-- CoverLast: "
	with open(filepath) as fp:
		for line in fp:
			if findTitle in line:
				title = extract(findTitle, line)
			elif findBookDir in line:
				bookDir = extract(findBookDir, line)
			elif findAuthorFirst in line:
				authorFirst = extract(findAuthorFirst, line)
			elif findAuthorLast in line:
				authorLast = extract(findAuthorLast, line)
			elif findEditorFirst in line:
				editorFirst = extract(findEditorFirst, line)
			elif findEditorLast in line:
				editorLast = extract(findEditorLast, line)
			elif findCoverFirst in line:
				coverFirst = extract(findCoverFirst, line)
			elif findCoverLast in line:
				coverLast = extract(findCoverLast, line)				
	
	if os.path.isdir(bookDir):
		print("Destination directory " + bookDir + " exists.")
		if force:
			print("Overwriting with -f (force) flag.")
			rmtree(bookDir)
		else:
			print("(use the -f flag to force  in future)")
			response = input("Do you want to delete it? (y/n) ")
			if response == 'y' or response == 'Y':
				rmtree(bookDir)
			else:
				exit()
	copytree("source/book", bookDir)
	copyfile("style.css", bookDir + "/OEBPS/Styles/style.css")

def dochapters(filepath):
	idTag = "[ID]"
	bodyTag = "[BODY]"
	imageID = "<a id=\"image\">"
	imageTag = "<img src="
	startChapter = "<!-- Start: "
	chapterFile = "<!-- File: "
	endChapter = "<!-- End: -->"
	global chapters
	with open(filepath) as fp:
		for line in fp: # this is going to let me look at every line in the file
			if startChapter in line:         # if I found something, found will be > 0
				chapterHead = extract(startChapter, line)  # great, get the string
				line = fp.readline()   # read the next line of the original file
				if chapterFile in line: 
					filename = extract(chapterFile, line).split()[0]
					chapterID = extract(chapterFile, line).split()[1]
					chapters.append([chapterHead, "Text/" + filename, chapterID])  
					writeFile = open(bookDir + "/OEBPS/Text/" + filename, 'w') # open it as a file to write
					templatefile = "source/blankchapter.xhtml"
					with open(templatefile) as template:
						for templine in template:
							if idTag in templine:
								templine = replace(idTag, chapterID, templine)
							elif titleTag in templine:
								templine = replace(titleTag, chapterHead, templine)
							else:
								if bodyTag in templine:
									nextline = fp.readline()
									while nextline.find(endChapter) == -1:
										if imageID in nextline:
											nextline = "<a id=\"image-" + str(len(images) + 1) + "\"><!-- Anchor --></a>"
										elif imageTag in nextline:
											firstCharImage = nextline.find('/') + 1
											lastHalfOfLine = nextline[firstCharImage:]
											lastCharImage = nextline[firstCharImage:].find('"')
											imageName = nextline[firstCharImage:lastCharImage+firstCharImage]
											images.append(imageName)
											firstHalfOfLine = nextline[nextline.find("\"")+1:]
											nextline = "<img src=\"../Images/" +  imageName + nextline[nextline.find(imageName)+len(imageName):]
											pathToImage = firstHalfOfLine[:firstHalfOfLine.find("\"")]
											print(pathToImage)
											print(filepath[:filepath.rfind("/")] + "/" + pathToImage)
											copyfile(filepath[:filepath.rfind("/")] + "/" + pathToImage, bookDir + "/OEBPS/Images/" + imageName)
										writeFile.write(nextline)
										nextline = fp.readline()
									templine = ""
							writeFile.write(templine)
					writeFile.close()      # close the write file
		coverFile = "source/blankcover.xhtml"
		coverDestination = bookDir + "/OEBPS/Text/cover.xhtml"
		wf = open(coverDestination, 'w')
		with open(coverFile) as cover:
			for line in cover:
				if titleTag in line:
					line = replace(titleTag, title, line)
				elif firstnameSearch + " " + lastnameSearch in line:
					line = replace(firstnameSearch + " " + lastnameSearch, authorFirst + " " + authorLast, line)
				wf.write(line)
		wf.close()
	
def dotocxhtml():
	tocFile = "source/blanktoc.xhtml"
	tocOutFile = bookDir + "/OEBPS/Text/toc.xhtml"
	tocOut = open(tocOutFile, 'w')
	with open(tocFile) as toc:
		for line in toc:
			if "[TOC]" in line:
				line = ""
				for each in chapters:
					line += "\t\t<li><a href=\"../" + each[1] + "\"><span>" + each[0] + "</span></a></li>\n" 
			elif titleTag in line:
				line = replace(titleTag, title, line)
			elif firstnameSearch in line:
				line = replace(firstnameSearch, authorFirst, line)
				line = replace(firstnameSearch, authorFirst, line)
				line = replace(lastnameSearch, authorLast, line)
				line = replace(lastnameSearch, authorLast, line)
			tocOut.write(line)
	chapters.insert(0,["Table of Contents", "Text/toc.xhtml", "toc"])
	tocOut.close()
					
def docontent():	
	contentFile = "source/blankcontent.opf"
	contentOutFile = bookDir + "/OEBPS/content.opf"
	contentOut = open(contentOutFile, 'w')
	with open(contentFile) as content:
		for line in content:
			if "[MANIFEST]" in line:
				line = ""
				for each in chapters:
					line += "\t<item href=\"" + each[1] + "\" id=\"" + each[2] + "\" media-type=\"application/xhtml+xml\" />\n"
				count = 1
				for each in images:
					line += "\t<item href=\"Images/" + each + "\" id=\"image-" + str(count) + "\" media-type=\"image/jpeg\" />\n"
					count += 1
			elif "[SPINE]" in line:
				line = ""
				for each in chapters:
					line += "\t<itemref idref=\"" + each[2] + "\" />\n"
			elif "[GUIDE]" in line:
				line = ""
				for each in chapters:
					line += "\t<reference href=\"" + each [1] + "\" type=\"text\" />\n"
			elif "[TITLE]" in line:
				line = line[0:line.find("[TITLE]")] + title + line[line.find("[TITLE]") + len("[TITLE]"):]
				print(line)
			elif "role=\"aut\"" in line:
				line = replace(firstnameSearch, authorFirst, line)
				line = replace(lastnameSearch, authorLast, line)
				line = replace(firstnameSearch, authorFirst, line)
				line = replace(lastnameSearch, authorLast, line)
			elif "role=\"edt\"":
				line = replace(firstnameSearch, editorFirst, line)
				line = replace(lastnameSearch, editorLast, line)
				line = replace(firstnameSearch, editorFirst, line)
				line = replace(lastnameSearch, editorLast, line)
			elif "role=\"cov\"" in line:
				line = replace(firstnameSearch, coverFirst, line)
				line = replace(lastnameSearch, coverLast, line)
				line = replace(firstnameSearch, coverFirst, line)
				line = replace(lastnameSearch, coverLast, line)
			elif "date opf:event=\"publication\"" in line:
				line = replace("2000-01-01", today, line)
			contentOut.write(line)
	contentOut.close()
	
def dotocncx():
	tocFile = "source/blanktoc.ncx"
	tocOut = bookDir + "/OEBPS/toc.ncx"
	tocOut = open(tocOut, 'w')
	with open(tocFile) as toc:
		for line in toc:
			if "[NCX]" in line:
				point = 2
				for each in chapters:
					tocOut.write("\t<navPoint id =\"" + each[2] + "\" playOrder=\"" + str(point) + "\">\n")
					tocOut.write("\t\t<navLabel>\n")
					tocOut.write("\t\t\t<text>" + each[0] + "</text>\n")
					tocOut.write("\t\t</navLabel>\n")
					tocOut.write("\t\t<content src=\"" + each[1] + "\"/>\n")
					tocOut.write("\t</navPoint>\n")
					point += 1
			else:
				tocOut.write(line)
	tocOut.close()
	
def main(argv):
	global force
	filepath = ''
	try:
		opts, args = getopt.getopt(argv, "h:i:f")
	except getopt.GetoptError:
		print("merger -i <inputfile> [-f]")
		exit(2)
	for opt, arg in opts:
		if opt == "-h":
			print("merger -i <inputfile> [-f]")
			exit()
		if opt in ("-i"):
			filepath = arg
		elif opt in ("-f"):
			force = True
	if not os.path.isfile(filepath):
	# does the file exist?
		print("File path {} does not exist. Exiting...".format(filepath))
		# if it doesn't, tell the user and quit
		exit()
	doBookInfo(filepath)
	dochapters(filepath)
	dotocxhtml()
	docontent()
	dotocncx()
	



main(sys.argv[1:]) # run the program

	
